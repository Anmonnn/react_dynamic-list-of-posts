{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","userPosts","setSelectedPost","selectedPost","className","map","post","id","title","type","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","NewCommentForm","setIsLoading","isLoading","useState","inputName","setInputName","inputEmail","setInputEmail","inputText","setInputText","inputNameSend","setInputNameSend","inputEmailSend","setInputEmailSend","inputTextSend","setInputTextSend","onSubmit","event","a","preventDefault","newComment","postId","name","email","htmlFor","placeholder","classNames","value","onChange","target","PostDetails","userComments","setUserComments","userCommentsError","setUserCommentsError","isDeleted","setIsDeleted","isOpenCom","setIsOpenCom","isCommentLoading","setIsCommentLoading","useEffect","ok","Error","catch","finally","useMemo","deleteComment","comId","comToDelete","find","com","length","href","UserSelector","users","setSelectedUser","selectedUser","isFocused","setIsFocused","onBlur","role","user","onMouseDown","App","setUsers","setUserPosts","isError","setIsEroor","fetchData","fetchUsers","ReactDOM","render","document","getElementById"],"mappings":"sSASaA,EAAyB,SAAC,GAAD,IACpCC,EADoC,EACpCA,UACAC,EAFoC,EAEpCA,gBACAC,EAHoC,EAGpCA,aAHoC,OAKpC,sBAAK,UAAQ,YAAb,UACE,mBAAGC,UAAU,QAAb,oBAEA,wBAAOA,UAAU,uDAAjB,UACE,gCACE,qBAAIA,UAAU,4BAAd,UACE,mCACA,uCACA,wCAIJ,gCACGH,EAAUI,KAAI,SAAAC,GAAI,OACjB,qBAAI,UAAQ,OAAZ,UACE,oBAAI,UAAQ,SAAZ,SAAsBA,EAAKC,KAE3B,oBAAI,UAAQ,YAAZ,SACGD,EAAKE,QAGR,oBAAIJ,UAAU,8BAAd,UACe,OAAZD,QAAY,IAAZA,OAAA,EAAAA,EAAcI,MAAOD,EAAKC,GACzB,wBACEE,KAAK,SACL,UAAQ,aACRL,UAAU,iBACVM,QAAS,kBAAMR,EAAgBI,IAJjC,mBASA,wBACEG,KAAK,SACL,UAAQ,aACRL,UAAU,0BACVM,QAAS,kBAAMR,EAAgBI,IAJjC,sBAlBkBA,EAAKC,gBC1B1BI,G,MAAS,kBACpB,qBAAKP,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCJbQ,EAAW,oCAGjB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,WAAWD,EAASF,MAOxB,SAASI,EACPC,GAGa,IAFbC,EAEY,uDAFY,MACxBC,EACY,uDADA,KAENC,EAAuB,CAAEF,UAW/B,OATIC,IAEFC,EAAQC,KAAOC,KAAKC,UAAUJ,GAC9BC,EAAQI,QAAU,CAChB,eAAgB,oCAKbb,EAAK,KACTc,MAAK,kBAAMC,MAAMhB,EAAWO,EAAKG,MACjCK,MAAK,SAAAE,GAAQ,OAAIA,EAASC,UAGxB,IAAMC,EACN,SAAIZ,GAAJ,OAAoBD,EAAWC,IADzBY,EAEL,SAAIZ,EAAaE,GAAjB,OAA+BH,EAAWC,EAAK,OAAQE,IAFlDU,EAIH,SAACZ,GAAD,OAAiBD,EAAQC,EAAK,WC1B3Ba,EAA8B,SAAC,GAIrC,IAHL7B,EAGI,EAHJA,aACA8B,EAEI,EAFJA,aACAC,EACI,EADJA,UAEA,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAkCJ,mBAAS,IAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAA0CN,oBAAS,GAAnD,mBAAOO,EAAP,KAAsBC,EAAtB,KACA,EAA4CR,oBAAS,GAArD,mBAAOS,EAAP,KAAuBC,EAAvB,KACA,EAA0CV,oBAAS,GAAnD,mBAAOW,EAAP,KAAsBC,EAAtB,KAEMC,EAAQ,uCAAG,WAAOC,GAAP,eAAAC,EAAA,yDACfD,EAAME,iBAENlB,GAAa,GACbU,GAAiB,GACjBE,GAAkB,GAClBE,GAAiB,GANF,SASPK,EAAa,CACjBC,OAAQlD,EAAaI,GACrB+C,KAAMlB,EACNmB,MAAOjB,EACPf,KAAMiB,GAGU,KAAdJ,GAAmC,KAAfE,GAAmC,KAAdE,EAhBhC,kCAiBLT,EAAY,YAAaqB,GAjBpB,yBAoBbnB,GAAa,GApBA,2EAAH,sDAgDd,OACE,uBAAM,UAAQ,iBAAiBe,SAAUA,EAAzC,UACE,sBAAK5C,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQoD,QAAQ,sBAAjC,yBAIA,sBAAKpD,UAAU,yCAAf,UACE,uBACEK,KAAK,OACL6C,KAAK,OACL/C,GAAG,sBACHkD,YAAY,eACZrD,UAAWsD,IAAW,QACpB,CAAE,YAA2B,KAAdtB,GAAoBM,IACrCiB,MAAOvB,EACPwB,SAxCc,SAACX,GACvBZ,EAAaY,EAAMY,OAAOF,OAC1BhB,GAAiB,MAyCX,sBAAMvC,UAAU,wBAAhB,SACE,mBAAGA,UAAU,kBAGA,KAAdgC,GAAoBM,GACnB,sBACEtC,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAKJ,KAAdgC,GAAoBM,GACnB,mBAAGtC,UAAU,iBAAiB,UAAQ,eAAtC,iCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,aAA/B,UACE,uBAAOA,UAAU,QAAQoD,QAAQ,uBAAjC,0BAIA,sBAAKpD,UAAU,yCAAf,UACE,uBACEK,KAAK,OACL6C,KAAK,QACL/C,GAAG,uBACHkD,YAAY,iBACZrD,UAAWsD,IAAW,QACpB,CAAE,YAA4B,KAAfpB,GAAqBM,IACtCe,MAAOrB,EACPsB,SAzEe,SAACX,GACxBV,EAAcU,EAAMY,OAAOF,OAC3Bd,GAAkB,MA0EZ,sBAAMzC,UAAU,wBAAhB,SACE,mBAAGA,UAAU,sBAGC,KAAfkC,GAAqBM,GACpB,sBACExC,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAKH,KAAfkC,GAAqBM,GACpB,mBAAGxC,UAAU,iBAAiB,UAAQ,eAAtC,kCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQoD,QAAQ,eAAjC,0BAIA,qBAAKpD,UAAU,UAAf,SACE,0BACEG,GAAG,eACH+C,KAAK,OACLG,YAAY,oBACZrD,UAAWsD,IAAW,WACpB,CAAE,YAA2B,KAAdlB,GAAoBM,IACrCa,MAAOnB,EACPoB,SAzGc,SAACX,GACvBR,EAAaQ,EAAMY,OAAOF,OAC1BZ,GAAiB,QA2GE,KAAdP,GAAoBM,GACnB,mBAAG1C,UAAU,iBAAiB,UAAQ,eAAtC,gCAMJ,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wBACEK,KAAK,SACLL,UAAWsD,IAAW,iBACpB,CAAE,aAAcxB,IAHpB,mBASF,qBAAK9B,UAAU,UAAf,SAEE,wBACEK,KAAK,QACLL,UAAU,0BACVM,QA/HgB,WACxB2B,EAAa,IACbM,GAAiB,GACjBJ,EAAc,IACdM,GAAkB,GAClBJ,EAAa,IACbM,GAAiB,IAsHX,4BC/KGe,EAA2B,SAAC,GAElC,IADL3D,EACI,EADJA,aAEA,EAAwCgC,mBAAoB,IAA5D,mBAAO4B,EAAP,KAAqBC,EAArB,KACA,EAAkD7B,oBAAS,GAA3D,mBAAO8B,EAAP,KAA0BC,EAA1B,KACA,EAAkC/B,oBAAS,GAA3C,mBAAOgC,EAAP,KAAkBC,EAAlB,KACA,EAAkCjC,oBAAS,GAA3C,mBAAOkC,EAAP,KAAkBC,EAAlB,KACA,EAAkCnC,oBAAS,GAA3C,mBAAOD,EAAP,KAAkBD,EAAlB,KACA,EAAgDE,oBAAS,GAAzD,mBAAOoC,EAAP,KAAyBC,EAAzB,KAEAC,qBAAU,WACR7C,MAAM,qDAAD,OAAsDzB,EAAaI,KACrEoB,MAAK,SAAAE,GAIJ,GAHAyC,GAAa,GACbrC,GAAa,IAERJ,EAAS6C,GACZ,MAAM,IAAIC,MAAM,+BAGlB,OAAO9C,EAASC,UAEjBH,KAAKqC,GACLY,OAAM,kBAAMV,GAAqB,MACjCW,SAAQ,WACPT,GAAa,GAEbnD,YAAW,WACTgB,GAAa,KACZ,UAEN,CAAC9B,IAEJ2E,mBAAQ,WACNlD,MAAM,qDAAD,OAAsDzB,EAAaI,KACrEoB,MAAK,SAAAE,GACJ,IAAKA,EAAS6C,GACZ,MAAM,IAAIC,MAAM,+BAGlB,OAAO9C,EAASC,UAEjBH,KAAKqC,GACLY,OAAM,kBAAMV,GAAqB,MACjCW,SAAQ,WACPT,GAAa,GAEbnD,YAAW,WACTgB,GAAa,KACZ,UAEN,CAACkC,EAAWI,IAEf,IAAMQ,EAAa,uCAAG,WAAOC,GAAP,eAAA9B,EAAA,yDACd+B,EAAclB,EAAamB,MAAK,SAAAC,GAAG,OAAIA,EAAI5E,KAAOyE,KADpC,UAIdC,EAJc,gCAKVlD,EAAA,oBAA2BkD,EAAY1E,KAL7B,mCAOV,IAAIoE,MAAM,SAPA,yDAUlBT,GAAqB,GAVH,yBAYlBE,GAAa,GAZK,6EAAH,sDAgBnB,OACE,qBAAKhE,UAAU,UAAU,UAAQ,cAAjC,SACE,sBAAKA,UAAU,UAAU,UAAQ,cAAjC,UACE,sBAAKA,UAAU,QAAf,UACE,oBAAI,UAAQ,YAAZ,oBACOD,EAAaI,GADpB,aAC2BJ,EAAaK,SAGxC,mBAAG,UAAQ,WAAX,SACGL,EAAaoB,UAIjBW,EAAY,cAAC,EAAD,IAET,qCACE,sBAAK9B,UAAU,QAAf,UACG6D,GACC,qBACE7D,UAAU,yBACV,UAAQ,gBAFV,kCAQuB,IAAxB2D,EAAaqB,QACZ,mBAAGhF,UAAU,aAAa,UAAQ,oBAAlC,6BAKF,mBAAGA,UAAU,aAAb,uBAEC2D,EAAa1D,KAAI,SAAC8E,GAAD,OAChB,0BACE/E,UAAU,mBACV,UAAQ,UAFV,UAKE,sBAAKA,UAAU,iBAAf,UACE,mBAAGiF,KAAI,iBAAYF,EAAI5B,OAAS,UAAQ,gBAAxC,SACG4B,EAAI7B,OAEP,wBACE,UAAQ,gBACR7C,KAAK,SACLL,UAAU,kBACV,aAAW,SACXM,QAAS,kBAAMqE,EAAcI,EAAI5E,KALnC,8BAWF,qBAAKH,UAAU,eAAe,UAAQ,cAAtC,SACG+E,EAAI5D,SAlBF4D,EAAI5E,UAwBb8D,EAUA,cAAC,EAAD,CACElE,aAAcA,EACd8B,aAAcuC,EACdtC,UAAWqC,IAZb,wBACE,UAAQ,qBACR9D,KAAK,SACLL,UAAU,iBACVM,QAAS,kBAAM4D,GAAa,IAJ9B,sCCrIHgB,EAA4B,SAAC,GAInC,IAHLC,EAGI,EAHJA,MACAC,EAEI,EAFJA,gBACAC,EACI,EADJA,aAEA,EAAkCtD,oBAAS,GAA3C,mBAAOuD,EAAP,KAAkBC,EAAlB,KAUA,OACE,sBACE,UAAQ,eACRvF,UAAU,qBAFZ,UAIE,qBAAKA,UAAU,mBAAf,SACE,yBACEK,KAAK,SACLL,UAAU,SACV,gBAAc,OACd,gBAAc,gBACdM,QAnBQ,WACd,OACSiF,GADLD,IAmBEE,OAAQ,kBAAMD,GAAa,IAN7B,UAQE,+BAAQF,EAAiCA,EAAanC,KAA/B,kBAEvB,sBAAMlD,UAAU,gBAAhB,SACE,mBAAGA,UAAU,oBAAoB,cAAY,gBAKlDsF,GACC,qBAAKtF,UAAU,gBAAgBG,GAAG,gBAAgBsF,KAAK,OAAvD,SACE,qBAAKzF,UAAU,mBAAf,SACGmF,EAAMlF,KAAI,SAAAyF,GAAI,OACb,mBACET,KAAI,gBAAWS,EAAKvF,IACpBH,UAAWsD,IAAW,gBAAiB,CACrC,YAAaoC,EAAKvF,MAAL,OAAYkF,QAAZ,IAAYA,OAAZ,EAAYA,EAAclF,MAGzCwF,YAAa,kBAAMP,EAAgBM,IANrC,SAQGA,EAAKxC,MAHDwC,EAAKvF,eC1CbyF,EAAgB,WAC3B,MAA0B7D,mBAAiB,IAA3C,mBAAOoD,EAAP,KAAcU,EAAd,KACA,EAAwC9D,mBAAsB,MAA9D,mBAAOsD,EAAP,KAAqBD,EAArB,KACA,EAAkCrD,mBAAiB,IAAnD,mBAAOlC,EAAP,KAAkBiG,EAAlB,KACA,EAAwC/D,mBAAsB,MAA9D,mBAAOhC,EAAP,KAAqBD,EAArB,KACA,EAA8BiC,oBAAS,GAAvC,mBAAOgE,EAAP,KAAgBC,EAAhB,KACA,EAAkCjE,oBAAS,GAA3C,mBAAOD,EAAP,KAAkBD,EAAlB,KAqCA,OAnCA6C,mBAAQ,WACN,IAAMuB,EAAS,uCAAG,4BAAAnD,EAAA,0DACZuC,EADY,iCAGZxD,GAAa,GAHD,SAIWF,EAAA,wBAAoC0D,EAAalF,KAJ5D,OAINsB,EAJM,OAMZqE,EAAarE,GAND,gDAQZuE,GAAW,GARC,yBAUZnE,GAAa,GAVD,4EAAH,qDAeXwD,GACFY,MAED,CAACZ,IAEJhB,qBAAU,WACR,IAAM6B,EAAU,uCAAG,4BAAApD,EAAA,+EAEQnB,EAAmB,UAF3B,OAETF,EAFS,OAIfoE,EAASpE,GAJM,gDAMfuE,GAAW,GANI,yDAAH,qDAUhBE,MACC,IAGD,sBAAMlG,UAAU,UAAhB,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,sBAAKA,UAAU,+BAAf,UACE,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CACEmF,MAAOA,EACPE,aAAcA,EACdD,gBAAiBA,OAInBC,GACA,mBAAG,UAAQ,iBAAX,8BAKDvD,EACG,cAAC,EAAD,IAEA,sBAAK9B,UAAU,QAAQ,UAAQ,cAA/B,UACG+F,GACC,qBACE/F,UAAU,yBACV,UAAQ,oBAFV,mCAQDqF,GAAqC,IAArBxF,EAAUmF,QACzB,qBACEhF,UAAU,0BACV,UAAQ,aAFV,0BAQoB,IAArBH,EAAUmF,QACT,cAAC,EAAD,CACEnF,UAAWA,EACXE,aAAcA,EACdD,gBAAiBA,YAS/B,qBACE,UAAQ,UACRE,UAAWsD,IACT,OACA,YACA,eACA,UACA,CAAE,gBAAiBvD,IAPvB,SAUGA,GACC,qBAAKC,UAAU,gCAAf,SACE,cAAC,EAAD,CAAaD,aAAcA,gBCxH3CoG,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4c771833.chunk.js","sourcesContent":["import React, { Dispatch, SetStateAction } from 'react';\nimport { Post } from '../types/Post';\n\ninterface T {\n  userPosts: Post[];\n  setSelectedPost: Dispatch<SetStateAction<null | Post>>;\n  selectedPost: null | Post;\n}\n\nexport const PostsList: React.FC<T> = ({\n  userPosts,\n  setSelectedPost,\n  selectedPost,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {userPosts.map(post => (\n          <tr data-cy=\"Post\" key={post.id}>\n            <td data-cy=\"PostId\">{post.id}</td>\n\n            <td data-cy=\"PostTitle\">\n              {post.title}\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              {selectedPost?.id === post.id ? (\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className=\"button is-link\"\n                  onClick={() => setSelectedPost(post)}\n                >\n                  Close\n                </button>\n              ) : (\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className=\"button is-link is-light\"\n                  onClick={() => setSelectedPost(post)}\n                >\n                  Open\n                </button>\n              )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState, Dispatch, SetStateAction } from 'react';\nimport classNames from 'classnames';\nimport { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\n\ninterface T {\n  selectedPost: Post;\n  setIsLoading: Dispatch<SetStateAction<boolean>>;\n  isLoading: boolean;\n}\n\nexport const NewCommentForm: React.FC<T> = ({\n  selectedPost,\n  setIsLoading,\n  isLoading,\n}) => {\n  const [inputName, setInputName] = useState('');\n  const [inputEmail, setInputEmail] = useState('');\n  const [inputText, setInputText] = useState('');\n  const [inputNameSend, setInputNameSend] = useState(false);\n  const [inputEmailSend, setInputEmailSend] = useState(false);\n  const [inputTextSend, setInputTextSend] = useState(false);\n\n  const onSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setIsLoading(true);\n    setInputNameSend(true);\n    setInputEmailSend(true);\n    setInputTextSend(true);\n\n    try {\n      const newComment = {\n        postId: selectedPost.id,\n        name: inputName,\n        email: inputEmail,\n        body: inputText,\n      };\n\n      if (inputName !== '' && inputEmail !== '' && inputText !== '') {\n        await client.post('/comments', newComment);\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleInputName = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInputName(event.target.value);\n    setInputNameSend(false);\n  };\n\n  const handleInputEmail = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInputEmail(event.target.value);\n    setInputEmailSend(false);\n  };\n\n  const handleInputText = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setInputText(event.target.value);\n    setInputTextSend(false);\n  };\n\n  const handleInputsClear = () => {\n    setInputName('');\n    setInputNameSend(false);\n    setInputEmail('');\n    setInputEmailSend(false);\n    setInputText('');\n    setInputTextSend(false);\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={onSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input',\n              { 'is-danger': inputName === '' && inputNameSend })}\n            value={inputName}\n            onChange={handleInputName}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {inputName === '' && inputNameSend && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {inputName === '' && inputNameSend && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input',\n              { 'is-danger': inputEmail === '' && inputEmailSend })}\n            value={inputEmail}\n            onChange={handleInputEmail}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {inputEmail === '' && inputEmailSend && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {inputEmail === '' && inputEmailSend && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea',\n              { 'is-danger': inputText === '' && inputTextSend })}\n            value={inputText}\n            onChange={handleInputText}\n          />\n        </div>\n\n        {inputText === '' && inputTextSend && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link',\n              { 'is-loading': isLoading })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleInputsClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useState, useMemo, useEffect } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\ninterface T {\n  selectedPost: Post\n}\n\nexport const PostDetails: React.FC<T> = ({\n  selectedPost,\n}) => {\n  const [userComments, setUserComments] = useState<Comment[]>([]);\n  const [userCommentsError, setUserCommentsError] = useState(false);\n  const [isDeleted, setIsDeleted] = useState(false);\n  const [isOpenCom, setIsOpenCom] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isCommentLoading, setIsCommentLoading] = useState(false);\n\n  useEffect(() => {\n    fetch(`https://mate.academy/students-api/comments?postId=${selectedPost.id}`)\n      .then(response => {\n        setIsOpenCom(false);\n        setIsLoading(true);\n\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n\n        return response.json();\n      })\n      .then(setUserComments)\n      .catch(() => setUserCommentsError(true)) // () => setUserCommentsError('error');\n      .finally(() => {\n        setIsDeleted(false);\n\n        setTimeout(() => {\n          setIsLoading(false);\n        }, 1000);\n      });\n  }, [selectedPost]);\n\n  useMemo(() => {\n    fetch(`https://mate.academy/students-api/comments?postId=${selectedPost.id}`)\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n\n        return response.json();\n      })\n      .then(setUserComments)\n      .catch(() => setUserCommentsError(true)) // () => setUserCommentsError('error');\n      .finally(() => {\n        setIsDeleted(false);\n\n        setTimeout(() => {\n          setIsLoading(false);\n        }, 1000);\n      });\n  }, [isDeleted, isCommentLoading]);\n\n  const deleteComment = async (comId: number) => {\n    const comToDelete = userComments.find(com => com.id === comId);\n\n    try {\n      if (comToDelete) {\n        await client.delete(`/comments/${comToDelete.id}`);\n      } else {\n        throw new Error('error');\n      }\n    } catch {\n      setUserCommentsError(true);\n    } finally {\n      setIsDeleted(true);\n    }\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost.id}: ${selectedPost.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost.body}\n          </p>\n        </div>\n\n        {isLoading ? <Loader />\n          : (\n            <>\n              <div className=\"block\">\n                {userCommentsError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"CommentsError\"\n                  >\n                    Something went wrong\n                  </div>\n                )}\n\n                {userComments.length === 0 && (\n                  <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                    No comments yet\n                  </p>\n                )}\n\n                <p className=\"title is-4\">Comments:</p>\n\n                {userComments.map((com: Comment) => (\n                  <article\n                    className=\"message is-small\"\n                    data-cy=\"Comment\"\n                    key={com.id}\n                  >\n                    <div className=\"message-header\">\n                      <a href={`mailto:${com.email}`} data-cy=\"CommentAuthor\">\n                        {com.name}\n                      </a>\n                      <button\n                        data-cy=\"CommentDelete\"\n                        type=\"button\"\n                        className=\"delete is-small\"\n                        aria-label=\"delete\"\n                        onClick={() => deleteComment(com.id)}\n                      >\n                        delete button\n                      </button>\n                    </div>\n\n                    <div className=\"message-body\" data-cy=\"CommentBody\">\n                      {com.body}\n                    </div>\n                  </article>\n                ))}\n              </div>\n\n              {!isOpenCom ? (\n                <button\n                  data-cy=\"WriteCommentButton\"\n                  type=\"button\"\n                  className=\"button is-link\"\n                  onClick={() => setIsOpenCom(true)}\n                >\n                  Write a comment\n                </button>\n              ) : (\n                <NewCommentForm\n                  selectedPost={selectedPost}\n                  setIsLoading={setIsCommentLoading}\n                  isLoading={isCommentLoading}\n                />\n              )}\n            </>\n          )}\n\n      </div>\n    </div>\n  );\n};\n","import React, { useState, Dispatch, SetStateAction } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ninterface T {\n  users: User[],\n  setSelectedUser: Dispatch<SetStateAction<null | User>>,\n  selectedUser: User | null,\n}\n\nexport const UserSelector: React.FC<T> = ({\n  users,\n  setSelectedUser,\n  selectedUser,\n}) => {\n  const [isFocused, setIsFocused] = useState(false);\n\n  const focused = () => {\n    if (isFocused) {\n      return setIsFocused(false);\n    }\n\n    return setIsFocused(true);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={focused}\n          onBlur={() => setIsFocused(false)}\n        >\n          <span>{!selectedUser ? 'Choose a user' : selectedUser.name}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isFocused && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(user => (\n              <a\n                href={`#user-${user.id}`}\n                className={classNames('dropdown-item', {\n                  'is-active': user.id === selectedUser?.id,\n                })}\n                key={user.id}\n                onMouseDown={() => setSelectedUser(user)}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { client } from './utils/fetchClient';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<null | User>(null);\n  const [userPosts, setUserPosts] = useState<Post[]>([]);\n  const [selectedPost, setSelectedPost] = useState<null | Post>(null);\n  const [isError, setIsEroor] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useMemo(() => {\n    const fetchData = async () => {\n      if (selectedUser) {\n        try {\n          setIsLoading(true);\n          const response = await client.get<Post[]>(`/posts?userId=${selectedUser.id}`);\n\n          setUserPosts(response);\n        } catch {\n          setIsEroor(true);\n        } finally {\n          setIsLoading(false);\n        }\n      }\n    };\n\n    if (selectedUser) {\n      fetchData();\n    }\n  }, [selectedUser]);\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        const response = await client.get<User[]>('/users');\n\n        setUsers(response);\n      } catch {\n        setIsEroor(true);\n      }\n    };\n\n    fetchUsers();\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                />\n              </div>\n\n              {!selectedUser && (\n                <p data-cy=\"NoSelectedUser\">\n                  No user selected\n                </p>\n              )}\n\n              {isLoading\n                ? <Loader />\n                : (\n                  <div className=\"block\" data-cy=\"MainContent\">\n                    {isError && (\n                      <div\n                        className=\"notification is-danger\"\n                        data-cy=\"PostsLoadingError\"\n                      >\n                        Something went wrong!\n                      </div>\n                    )}\n\n                    {selectedUser && userPosts.length === 0 && (\n                      <div\n                        className=\"notification is-warning\"\n                        data-cy=\"NoPostsYet\"\n                      >\n                        No posts yet\n                      </div>\n                    )}\n\n                    {userPosts.length !== 0 && (\n                      <PostsList\n                        userPosts={userPosts}\n                        selectedPost={selectedPost}\n                        setSelectedPost={setSelectedPost}\n                      />\n                    )}\n                  </div>\n                )}\n\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            {selectedPost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails selectedPost={selectedPost} />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}