{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","userPosts","setSelectedPost","selectedPost","className","map","id","title","userId","body","type","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","Inputs","client","NewCommentForm","setIsLoading","isLoading","setUserComments","useState","inputName","setInputName","inputEmail","setInputEmail","inputText","setInputText","isInputNameSent","setIsInputNameSent","isInputEmailSent","setIsInputEmailSent","isInputTextSent","setIsInputTextSent","onSubmit","event","a","preventDefault","newComment","postId","name","email","trim","prev","handleInputs","Name","target","value","Email","Text","htmlFor","placeholder","classNames","onChange","PostDetails","userComments","userCommentsError","setUserCommentsError","isOpenCom","setIsOpenCom","isCommentLoading","setIsCommentLoading","useMemo","ok","Error","catch","finally","deleteComment","comId","comToDelete","find","com","filter","length","href","UserSelector","users","setSelectedUser","selectedUser","isFocused","setIsFocused","onBlur","role","user","onMouseDown","handleChangeUser","App","setUsers","setUserPosts","isError","setIsEroor","fetchData","useEffect","fetchUsers","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7d5ae848.chunk.js","sourcesContent":["import React, { Dispatch, SetStateAction } from 'react';\nimport { Post } from '../types/Post';\n\ninterface T {\n  userPosts: Post[];\n  setSelectedPost: Dispatch<SetStateAction<null | Post>>;\n  selectedPost: null | Post;\n}\n\nexport const PostsList: React.FC<T> = ({\n  userPosts,\n  setSelectedPost,\n  selectedPost,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {userPosts.map(({\n          id,\n          title,\n          userId,\n          body,\n        }) => (\n          <tr data-cy=\"Post\" key={id}>\n            <td data-cy=\"PostId\">{id}</td>\n\n            <td data-cy=\"PostTitle\">\n              {title}\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              {selectedPost?.id === id ? (\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className=\"button is-link\"\n                  onClick={() => setSelectedPost(null)}\n                >\n                  Close\n                </button>\n              ) : (\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className=\"button is-link is-light\"\n                  onClick={() => setSelectedPost({\n                    id,\n                    title,\n                    userId,\n                    body,\n                  })}\n                >\n                  Open\n                </button>\n              )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState, Dispatch, SetStateAction } from 'react';\nimport classNames from 'classnames';\nimport { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\n\ninterface T {\n  selectedPost: Post;\n  setIsLoading: Dispatch<SetStateAction<boolean>>;\n  isLoading: boolean;\n  setUserComments: Dispatch<SetStateAction<Comment[]>>;\n}\n\nenum Inputs {\n  Name = 'name',\n  Email = 'email',\n  Text = 'text',\n}\n\nexport const NewCommentForm: React.FC<T> = ({\n  selectedPost,\n  setIsLoading,\n  isLoading,\n  setUserComments,\n}) => {\n  const [inputName, setInputName] = useState('');\n  const [inputEmail, setInputEmail] = useState('');\n  const [inputText, setInputText] = useState('');\n  const [isInputNameSent, setIsInputNameSent] = useState(false);\n  const [isInputEmailSent, setIsInputEmailSent] = useState(false);\n  const [isInputTextSent, setIsInputTextSent] = useState(false);\n\n  const onSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setIsLoading(true);\n    setIsInputNameSent(true);\n    setIsInputEmailSent(true);\n    setIsInputTextSent(true);\n\n    try {\n      const newComment: Comment = {\n        postId: selectedPost.id,\n        name: inputName,\n        email: inputEmail,\n        body: inputText,\n      };\n\n      if (\n        inputName.trim()\n        && inputEmail.trim()\n        && inputText.trim()\n      ) {\n        const response: any = await client.post('/comments', newComment);\n\n        newComment.id = response.id;\n        setUserComments((prev) => [...prev, newComment]);\n\n        setInputText('');\n        setIsInputTextSent(false);\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleInputs\n    = (\n      event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n      type: Inputs,\n    ) => {\n      switch (type) {\n        case Inputs.Name:\n          setInputName(event.target.value);\n          setIsInputNameSent(false);\n          break;\n        case Inputs.Email:\n          setInputEmail(event.target.value);\n          setIsInputEmailSent(false);\n          break;\n        case Inputs.Text:\n          setInputText(event.target.value);\n          setIsInputTextSent(false);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n  const handleInputsClear = () => {\n    setInputName('');\n    setIsInputNameSent(false);\n    setInputEmail('');\n    setIsInputEmailSent(false);\n    setInputText('');\n    setIsInputTextSent(false);\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={onSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input',\n              { 'is-danger': !inputName.trim() && isInputNameSent })}\n            value={inputName}\n            onChange={(event) => handleInputs(event, Inputs.Name)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {!inputName.trim() && isInputNameSent && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {!inputName.trim() && isInputNameSent && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input',\n              { 'is-danger': !inputEmail.trim() && isInputEmailSent })}\n            value={inputEmail}\n            onChange={(event) => handleInputs(event, Inputs.Email)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {!inputEmail.trim() && isInputEmailSent && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {!inputEmail.trim() && isInputEmailSent && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea',\n              { 'is-danger': !inputText.trim() && isInputTextSent })}\n            value={inputText}\n            onChange={(event) => handleInputs(event, Inputs.Text)}\n          />\n        </div>\n\n        {!inputText.trim() && isInputTextSent && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link',\n              { 'is-loading': isLoading })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleInputsClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useState, useMemo } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\ninterface T {\n  selectedPost: Post\n}\n\nexport const PostDetails: React.FC<T> = ({\n  selectedPost,\n}) => {\n  const [userComments, setUserComments] = useState<Comment[]>([]);\n  const [userCommentsError, setUserCommentsError] = useState(false);\n  const [isOpenCom, setIsOpenCom] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isCommentLoading, setIsCommentLoading] = useState(false);\n  // const [isDeleted, setIsDeleted] = useState(false);\n\n  useMemo(() => {\n    fetch(`https://mate.academy/students-api/comments?postId=${selectedPost.id}`)\n      .then(response => {\n        setIsOpenCom(false);\n        setIsLoading(true);\n\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n\n        return response.json();\n      })\n      .then(setUserComments)\n      .catch(() => setUserCommentsError(true))\n      .finally(() => {\n        setTimeout(() => {\n          setIsLoading(false);\n        }, 1000);\n      });\n  }, [selectedPost]);\n\n  const deleteComment = async (comId: number | undefined) => {\n    const comToDelete = userComments.find(com => com.id === comId);\n\n    try {\n      if (comToDelete) {\n        await client.delete(`/comments/${comToDelete.id}`);\n\n        setUserComments((prev) => (\n          prev.filter(com => com.id !== comId)\n        ));\n      } else {\n        throw new Error('error');\n      }\n    } catch {\n      setUserCommentsError(true);\n    }\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost.id}: ${selectedPost.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost.body}\n          </p>\n        </div>\n\n        {isLoading ? <Loader />\n          : (\n            <>\n              <div className=\"block\">\n                {userCommentsError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"CommentsError\"\n                  >\n                    Something went wrong\n                  </div>\n                )}\n\n                {userComments.length === 0 && (\n                  <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                    No comments yet\n                  </p>\n                )}\n\n                <p className=\"title is-4\">Comments:</p>\n\n                {userComments.map(({\n                  id,\n                  name,\n                  email,\n                  body,\n                }) => (\n                  <article\n                    className=\"message is-small\"\n                    data-cy=\"Comment\"\n                    key={id}\n                  >\n                    <div className=\"message-header\">\n                      <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n                        {name}\n                      </a>\n                      <button\n                        data-cy=\"CommentDelete\"\n                        type=\"button\"\n                        className=\"delete is-small\"\n                        aria-label=\"delete\"\n                        // onClick={() => deleteComment(id)}\n                        onClick={() => deleteComment(id)}\n                      >\n                        delete button\n                      </button>\n                    </div>\n\n                    <div className=\"message-body\" data-cy=\"CommentBody\">\n                      {body}\n                    </div>\n                  </article>\n                ))}\n              </div>\n\n              {!isOpenCom ? (\n                <button\n                  data-cy=\"WriteCommentButton\"\n                  type=\"button\"\n                  className=\"button is-link\"\n                  onClick={() => setIsOpenCom(true)}\n                >\n                  Write a comment\n                </button>\n              ) : (\n                <NewCommentForm\n                  selectedPost={selectedPost}\n                  setIsLoading={setIsCommentLoading}\n                  isLoading={isCommentLoading}\n                  setUserComments={setUserComments}\n                />\n              )}\n            </>\n          )}\n\n      </div>\n    </div>\n  );\n};\n","import React, { useState, Dispatch, SetStateAction } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\n\ninterface T {\n  users: User[],\n  setSelectedUser: Dispatch<SetStateAction<null | User>>,\n  setSelectedPost: Dispatch<SetStateAction<null | Post>>,\n  selectedUser: User | null,\n}\n\nexport const UserSelector: React.FC<T> = ({\n  users,\n  setSelectedUser,\n  selectedUser,\n  setSelectedPost,\n}) => {\n  const [isFocused, setIsFocused] = useState(false);\n\n  const focused = () => {\n    if (isFocused) {\n      return setIsFocused(false);\n    }\n\n    return setIsFocused(true);\n  };\n\n  const handleChangeUser = (user: User) => {\n    setSelectedUser(user);\n    setSelectedPost(null);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={focused}\n          onBlur={() => setIsFocused(false)}\n        >\n          <span>{!selectedUser ? 'Choose a user' : selectedUser.name}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isFocused && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(user => (\n              <a\n                href={`#user-${user.id}`}\n                className={classNames('dropdown-item', {\n                  'is-active': user.id === selectedUser?.id,\n                })}\n                key={user.id}\n                onMouseDown={() => handleChangeUser(user)}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { client } from './utils/fetchClient';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<null | User>(null);\n  const [userPosts, setUserPosts] = useState<Post[]>([]);\n  const [selectedPost, setSelectedPost] = useState<null | Post>(null);\n  const [isError, setIsEroor] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useMemo(() => {\n    const fetchData = async () => {\n      if (selectedUser) {\n        try {\n          setIsLoading(true);\n          const response = await client.get<Post[]>(`/posts?userId=${selectedUser.id}`);\n\n          setUserPosts(response);\n        } catch {\n          setIsEroor(true);\n        } finally {\n          setIsLoading(false);\n        }\n      }\n    };\n\n    if (selectedUser) {\n      fetchData();\n    }\n  }, [selectedUser]);\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        const response = await client.get<User[]>('/users');\n\n        setUsers(response);\n      } catch {\n        setIsEroor(true);\n      }\n    };\n\n    fetchUsers();\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  setSelectedPost={setSelectedPost}\n                  users={users}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                />\n              </div>\n\n              {!selectedUser && (\n                <p data-cy=\"NoSelectedUser\">\n                  No user selected\n                </p>\n              )}\n\n              {isLoading\n                ? <Loader />\n                : (\n                  <div className=\"block\" data-cy=\"MainContent\">\n                    {isError && (\n                      <div\n                        className=\"notification is-danger\"\n                        data-cy=\"PostsLoadingError\"\n                      >\n                        Something went wrong!\n                      </div>\n                    )}\n\n                    {selectedUser && userPosts.length === 0 && (\n                      <div\n                        className=\"notification is-warning\"\n                        data-cy=\"NoPostsYet\"\n                      >\n                        No posts yet\n                      </div>\n                    )}\n\n                    {userPosts.length !== 0 && (\n                      <PostsList\n                        userPosts={userPosts}\n                        selectedPost={selectedPost}\n                        setSelectedPost={setSelectedPost}\n                      />\n                    )}\n                  </div>\n                )}\n\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            {selectedPost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails selectedPost={selectedPost} />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}